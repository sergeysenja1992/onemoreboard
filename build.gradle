import groovy.io.FileType

buildscript {
	ext {
		kotlinVersion = '1.2.51'
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-jpa"
apply plugin: "kotlin-allopen"
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'ua.pp.ssenko'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
}


def webappDir = "$projectDir/src/main/webapp"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildAngular"
}

task buildAngular(type:Exec) {
	// installAngular should be run prior to this task
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}

task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}

ext {
	springCloudVersion = 'Finchley.SR1'
}

task translate {
	doLast {

		def regexp = """<ng-tr\\s* \\[key\\]="'(.*)'">\\s*</ng-tr>"""

		def dir = new File(project.projectDir.toString() + '/src/main/webapp/src/app')
		dir.eachFileRecurse (FileType.FILES) { file ->
			if (file.name.endsWith('.html')) {
				def html = file.text
				def list = []
				html.findAll(regexp) { result ->
					def key = result[1]
					key = key.replaceAll('//W', '_').replaceAll('//s', '_').toUpperCase()
					list << [result[0], key]
				}

				list.forEach{ html = html.replaceAll(it[0], """<ng-tr [key]="'${it[1]}'"></ng-tr>""") }

				file.write(html)
			}
		}

	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-freemarker')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-validation')
	compile('org.springframework.boot:spring-boot-starter-web')

	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.cloud:spring-cloud-starter-oauth2')

	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	//compile('org.liquibase:liquibase-core')
	compile('org.springframework.session:spring-session-core')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile 'org.jetbrains.kotlin:kotlin-maven-noarg'

	compile("org.jetbrains.kotlin:kotlin-reflect")

	runtime('org.apache.derby:derby')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
